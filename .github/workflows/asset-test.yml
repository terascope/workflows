name: Test Teraslice Asset
run-name: ${{ github.actor }} is testing the Teraslice Asset
on:
  workflow_call:

jobs:
  check-docker-limit-before:
    uses: ./.github/workflows/check-docker-limit.yml
    secrets: inherit 

  cache-docker-images:
    needs: check-docker-limit-before
    uses: ./.github/workflows/cache-docker-images.yml
    secrets: inherit

  test-linux:
    runs-on: ubuntu-latest
    needs: cache-docker-images
    strategy:
      matrix:
        # NOTE: Hard Coded Node Version array, should match array in build-and-publish-asset.yml
        node-version: [18, 20, 22]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      # we login to docker to avoid docker pull limit rates
      # secrets are now duplicated for Actions and Dependabot
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: yarn setup
      - run: yarn lint
      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt
      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}
      - run: yarn test:all
      - name: Ensure jq is installed
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Locate and Add Resolution to Global Package.json
        run: |
          GLOBAL_PACKAGE_DIR=$(yarn global dir)
          mkdir -p "$GLOBAL_PACKAGE_DIR"
          echo "export PATH=$(yarn global bin):\$PATH" >> $GITHUB_ENV
          yarn global add dummy-package
          PACKAGE_JSON="$GLOBAL_PACKAGE_DIR/package.json"
          echo "Updating $PACKAGE_JSON"
          jq '.resolutions["point-in-polygon-hao"] = "1.1.0"' $PACKAGE_JSON > /tmp/pkg.json && mv /tmp/pkg.json $PACKAGE_JSON
          cat $PACKAGE_JSON
      - run: yarn global add teraslice-cli
      - run: teraslice-cli -v
      - run: teraslice-cli assets build
      - run: ls -l build/

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          # NOTE: Hard Coded Node Version
          node-version: '18'
      # NOTE: Prevent python 3.12 breaking node-gyp installations in the kafka asset
      # TODO: try default python again in the future 
      - name: Use Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: yarn setup
      - run: yarn lint
      # TODO: Ideally we'd be able to at least run unit tests that don't require docker.
      #- run: yarn test:all
      - name: Ensure jq is installed
        run: brew install jq
      - name: Locate and Add Resolution to Global Package.json
        run: |
          GLOBAL_PACKAGE_DIR=$(yarn global dir)
          mkdir -p "$GLOBAL_PACKAGE_DIR"
          echo "export PATH=$(yarn global bin):\$PATH" >> $GITHUB_ENV
          yarn global add dummy-package
          PACKAGE_JSON="$GLOBAL_PACKAGE_DIR/package.json"
          echo "Updating $PACKAGE_JSON"
          jq '.resolutions["point-in-polygon-hao"] = "1.1.0"' $PACKAGE_JSON > /tmp/pkg.json && mv /tmp/pkg.json $PACKAGE_JSON
          cat $PACKAGE_JSON
      - run: yarn global add teraslice-cli
      - run: teraslice-cli -v
      - run: teraslice-cli assets build
      - run: ls -l build/

  check-docker-limit-after:
    needs: test-linux
    uses: ./.github/workflows/check-docker-limit.yml
    secrets: inherit 